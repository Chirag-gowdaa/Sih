import React, { useState, useEffect, useRef } from "react";
import jsPDF from "jspdf";

const App = () => {
  const [task, setTask] = useState("");
  const [disks, setDisks] = useState([]);
  const [selectedDisk, setSelectedDisk] = useState(null);
  const [method, setMethod] = useState("zero");
  const [progress, setProgress] = useState(0);
  const [logs, setLogs] = useState([]);
  const [certificate, setCertificate] = useState(null);
  const [sudoPassword, setSudoPassword] = useState("");
  const [confirm, setConfirm] = useState(false);
  const [jsonLog, setJsonLog] = useState(null);

  const logsRef = useRef();

  // Fetch disks on load
  useEffect(() => {
    fetch("http://localhost:5000/api/disks")
      .then((res) => res.json())
      .then((data) => setDisks(data.disks || []))
      .catch((err) => setLogs((prev) => [...prev, `‚ùå Disk fetch failed`]));
  }, []);

  // Auto-scroll logs
  useEffect(() => {
    if (logsRef.current) {
      logsRef.current.scrollTop = logsRef.current.scrollHeight;
    }
  }, [logs]);

  const handleAction = async () => {
    if (!task) return alert("Choose an action");
    if (!sudoPassword) return alert("Enter admin password");
    if (task === "wipe" && !selectedDisk) return alert("Select a disk");

    setProgress(0);
    setLogs([]);
    setCertificate(null);
    setJsonLog(null);

    try {
      const url =
        task === "wipe"
          ? "http://localhost:5000/api/wipe"
          : "http://localhost:5000/api/factory-reset";

      const body =
        task === "wipe"
          ? { device: `/dev/${selectedDisk.name}`, method, sudoPassword }
          : { sudoPassword };

      await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });

      startSSE(task === "wipe" ? "/api/wipe-progress" : "/api/factory-progress");
    } catch (err) {
      setLogs((prev) => [...prev, `‚ùå Error: ${err.message}`]);
    }
  };

  const startSSE = (path) => {
    const evt = new EventSource(`http://localhost:5000${path}`);
    let lastProgress = 0;

    evt.onmessage = (e) => {
      const val = Number(e.data);
      lastProgress = val;
      setProgress(val);
      setLogs((prev) => [...prev, `Progress: ${val}%`]);

      // fetch live JSON log
      fetch(
        task === "wipe"
          ? "http://localhost:5000/wipe_live.json"
          : "http://localhost:5000/factory_live.json"
      )
        .then((res) => res.json())
        .then((json) => setJsonLog(json));
    };

    evt.addEventListener("done", (e) => {
      try {
        const cert = JSON.parse(e.data);
        setCertificate(cert);
        setLogs((prev) => [...prev, "‚úÖ Operation completed"]);
      } catch {
        setCertificate({ status: "OK" });
      }
      setProgress(100);
      evt.close();
    });

    evt.onerror = () => {
      setLogs((prev) => [...prev, "‚ùå SSE connection error"]);
      evt.close();
    };
  };

  const downloadPDF = () => {
    if (!certificate) return;
    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("üîê Certificate of Secure Erasure", 20, 20);

    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);

    let y = 40;
    Object.entries(certificate).forEach(([key, value]) => {
      doc.text(`${key}: ${value}`, 20, y);
      y += 10;
    });

    doc.setFontSize(10);
    doc.text("Generated by SIH Secure Wiper Tool", 20, y + 20);
    doc.save("certificate.pdf");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white p-10 font-sans">
      <h1 className="text-4xl font-bold mb-8 text-center text-green-400">
        üîê SIH Secure Disk Wiper
      </h1>

      {/* Task Selection */}
      <div className="mb-6">
        <label className="font-semibold">Choose Action:</label>
        <select
          value={task}
          onChange={(e) => {
            setTask(e.target.value);
            setConfirm(false);
            setSelectedDisk(null);
          }}
          className="ml-3 p-2 rounded bg-slate-700 border border-slate-600"
        >
          <option value="">-- choose --</option>
          <option value="wipe">üíÄ Disk Wipe (DESTROYS OS)</option>
          <option value="factory">‚ôªÔ∏è Factory Reset</option>
        </select>
      </div>

      {/* Disk List */}
      {task === "wipe" && (
        <div className="mb-6">
          <p className="font-semibold mb-2">Available Disks:</p>
          <div className="grid grid-cols-2 gap-4">
            {disks.map((d) => (
              <div
                key={d.name}
                onClick={() => setSelectedDisk(d)}
                className={`p-4 rounded-xl cursor-pointer transition ${
                  selectedDisk?.name === d.name
                    ? "bg-green-700"
                    : "bg-slate-700 hover:bg-slate-600"
                }`}
              >
                <h3 className="font-bold text-lg">/dev/{d.name}</h3>
                <p className="text-sm">{d.size}</p>
                <p className="text-xs text-slate-300">{d.type}</p>
              </div>
            ))}
          </div>

          {/* Method */}
          <div className="mt-4">
            <label className="font-semibold">Method:</label>
            <select
              value={method}
              onChange={(e) => setMethod(e.target.value)}
              className="ml-3 p-2 rounded bg-slate-700 border border-slate-600"
            >
              <option value="zero">‚ö° Zero-fill (Quick)</option>
              <option value="random">üé≤ Random Overwrite (Secure)</option>
            </select>
          </div>
        </div>
      )}

      {/* Password */}
      <div className="mb-6">
        <label className="font-semibold">Admin Password:</label>
        <input
          type="password"
          value={sudoPassword}
          onChange={(e) => setSudoPassword(e.target.value)}
          className="ml-3 p-2 rounded bg-slate-700 border border-slate-600"
        />
      </div>

      {/* Confirm + Start */}
      {task === "wipe" && selectedDisk && !confirm && (
        <button
          onClick={() => setConfirm(true)}
          className="bg-red-600 px-6 py-2 rounded-lg font-semibold hover:bg-red-500"
        >
          ‚ö†Ô∏è Confirm Wipe {selectedDisk.name}
        </button>
      )}

      {confirm && (
        <button
          onClick={handleAction}
          disabled={progress > 0 && progress < 100}
          className="bg-green-600 px-6 py-2 rounded-lg font-semibold hover:bg-green-500 ml-2"
        >
          {progress > 0 && progress < 100 ? "Running..." : "Start Now"}
        </button>
      )}

      {/* Progress */}
      {progress > 0 && (
        <div className="mt-6">
          <div className="w-full bg-slate-700 rounded-full h-4">
            <div
              className="bg-green-500 h-4 rounded-full transition-all"
              style={{ width: `${progress}%` }}
            />
          </div>
          <p className="text-center mt-2">{progress}%</p>
        </div>
      )}

      {/* Logs */}
      {logs.length > 0 && (
        <div
          ref={logsRef}
          className="mt-6 bg-slate-800 p-4 rounded-lg h-40 overflow-y-auto text-sm"
        >
          {logs.map((log, i) => (
            <div key={i}>{log}</div>
          ))}
        </div>
      )}

      {/* JSON Live Log */}
      {jsonLog && (
        <div className="mt-6 bg-slate-800 p-4 rounded-lg">
          <h3 className="font-semibold text-green-400 mb-2">Live JSON Log</h3>
          <pre className="text-xs overflow-x-auto">
            {JSON.stringify(jsonLog, null, 2)}
          </pre>
        </div>
      )}

      {/* Certificate */}
      {certificate && (
        <div className="mt-6 bg-slate-800 p-6 rounded-lg border border-green-600">
          <h2 className="text-xl font-bold text-green-400 mb-3">
            ‚úÖ Certificate of Erasure
          </h2>
          <pre className="text-sm bg-slate-900 p-4 rounded-lg overflow-x-auto">
            {JSON.stringify(certificate, null, 2)}
          </pre>
          <button
            onClick={downloadPDF}
            className="mt-4 bg-blue-600 px-4 py-2 rounded-lg font-semibold hover:bg-blue-500"
          >
            Download Certificate
          </button>
        </div>
      )}
    </div>
  );
};

export default App;
